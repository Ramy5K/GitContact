<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub Email Hunter - AI Sourcing Tool</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-bg: #0a0a0a;
            --secondary-bg: #111111;
            --card-bg: #1a1a1a;
            --accent-bg: #222222;
            --text-primary: #ffffff;
            --text-secondary: #a0a0a0;
            --text-muted: #666666;
            --accent-green: #1a4d3a;
            --accent-green-light: #2d6b4f;
            --accent-green-bright: #3d8b64;
            --accent-gold: #d4af37;
            --success-green: #10b981;
            --border-color: #333333;
            --border-accent: #444444;
            --shadow-glow: rgba(26, 77, 58, 0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: var(--primary-bg);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
            min-height: 100vh;
        }

        /* Background Pattern */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 20%, rgba(26, 77, 58, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(45, 107, 79, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 60%, rgba(61, 139, 100, 0.08) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            position: relative;
            z-index: 1;
        }

        /* Header */
        .header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .brand {
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
            padding: 0.75rem 1.5rem;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 2rem;
            backdrop-filter: blur(10px);
        }

        .brand-icon {
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, var(--accent-green), var(--accent-green-bright));
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 0.875rem;
            color: var(--text-primary);
            box-shadow: 0 0 20px rgba(26, 77, 58, 0.4);
        }

        .brand-text {
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--text-secondary);
            letter-spacing: 0.025em;
        }

        .main-title {
            font-size: clamp(2.5rem, 8vw, 4.5rem);
            font-weight: 900;
            letter-spacing: -0.02em;
            margin-bottom: 1rem;
            background: linear-gradient(135deg, var(--text-primary), var(--text-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            line-height: 1.1;
        }

        .subtitle {
            font-size: 1.25rem;
            color: var(--text-secondary);
            font-weight: 400;
            max-width: 600px;
            margin: 0 auto 2rem;
        }

        /* Mode Toggle */
        .mode-toggle {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-bottom: 3rem;
            flex-wrap: wrap;
        }

        .mode-btn {
            padding: 0.875rem 1.5rem;
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-secondary);
            border-radius: 1rem;
            font-weight: 500;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
        }

        .mode-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .mode-btn:hover::before {
            left: 100%;
        }

        .mode-btn:hover {
            border-color: var(--border-accent);
            transform: translateY(-1px);
        }

        .mode-btn.active {
            background: linear-gradient(135deg, var(--accent-green), var(--accent-green-bright));
            border-color: var(--accent-green);
            color: var(--text-primary);
            font-weight: 600;
            box-shadow: 0 0 20px var(--shadow-glow);
        }

        /* Cards */
        .card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 1.5rem;
            padding: 2rem;
            margin-bottom: 2rem;
            backdrop-filter: blur(10px);
            position: relative;
            overflow: hidden;
        }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, var(--accent-green-bright), transparent);
            opacity: 0.5;
        }

        .card-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .card-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--accent-green), var(--accent-green-bright));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            box-shadow: 0 0 15px rgba(26, 77, 58, 0.3);
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .card-subtitle {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        /* Form Elements */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .form-input {
            width: 100%;
            padding: 1rem;
            background: var(--secondary-bg);
            border: 1px solid var(--border-color);
            border-radius: 0.75rem;
            color: var(--text-primary);
            font-size: 0.875rem;
            transition: all 0.2s ease;
            font-family: inherit;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent-green-bright);
            box-shadow: 0 0 0 3px rgba(26, 77, 58, 0.2);
        }

        .form-input::placeholder {
            color: var(--text-muted);
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 1rem 2rem;
            background: linear-gradient(135deg, var(--accent-green), var(--accent-green-bright));
            color: var(--text-primary);
            border: none;
            border-radius: 0.75rem;
            font-weight: 600;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
            text-decoration: none;
            font-family: inherit;
            box-shadow: 0 4px 15px rgba(26, 77, 58, 0.3);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 8px 25px rgba(26, 77, 58, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-large {
            padding: 1.25rem 2.5rem;
            font-size: 1rem;
            border-radius: 1rem;
        }

        /* Input Container */
        .input-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .input-container .form-input {
            flex: 1;
            padding: 1.25rem;
            font-size: 1rem;
        }

        /* Results */
        .result {
            margin-top: 2rem;
            padding: 2rem;
            border-radius: 1rem;
            animation: slideUp 0.3s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .result.success {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05));
            border: 1px solid rgba(16, 185, 129, 0.2);
        }

        .result.error {
            background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05));
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        .result.loading {
            background: linear-gradient(135deg, rgba(26, 77, 58, 0.1), rgba(26, 77, 58, 0.05));
            border: 1px solid rgba(26, 77, 58, 0.2);
        }

        .result-header {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .result-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .result-stats {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        /* Email Items */
        .email-item {
            background: var(--secondary-bg);
            border: 1px solid var(--border-color);
            border-radius: 0.75rem;
            padding: 1rem;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
        }

        .email-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--accent-green-bright);
            transform: scaleY(0);
            transition: transform 0.2s ease;
        }

        .email-item:hover::before {
            transform: scaleY(1);
        }

        .email-item:hover {
            border-color: var(--accent-green-bright);
            transform: translateX(4px);
            box-shadow: 0 4px 15px rgba(26, 77, 58, 0.2);
        }

        .email-item.candidate {
            background: linear-gradient(135deg, rgba(26, 77, 58, 0.15), rgba(45, 107, 79, 0.1));
            border-color: var(--accent-green-bright);
        }

        .email-item.candidate::before {
            background: var(--accent-gold);
            transform: scaleY(1);
        }

        .email-address {
            font-family: 'JetBrains Mono', monospace;
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .email-meta {
            font-size: 0.75rem;
            color: var(--text-secondary);
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .confidence-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 0.5rem;
            font-size: 0.625rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .confidence-high {
            background: rgba(212, 175, 55, 0.2);
            color: var(--accent-gold);
        }

        .confidence-medium {
            background: rgba(26, 77, 58, 0.3);
            color: var(--accent-green-bright);
        }

        .confidence-low {
            background: rgba(160, 160, 160, 0.2);
            color: var(--text-secondary);
        }

        /* Suggestions */
        .suggestions {
            margin-top: 2rem;
            text-align: center;
        }

        .suggestions-title {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-bottom: 1rem;
        }

        .suggestion-tags {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 0.5rem;
        }

        .suggestion-tag {
            padding: 0.5rem 1rem;
            background: var(--secondary-bg);
            border: 1px solid var(--border-color);
            border-radius: 2rem;
            color: var(--text-secondary);
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .suggestion-tag:hover {
            border-color: var(--accent-green-bright);
            color: var(--accent-green-bright);
            transform: translateY(-1px);
            box-shadow: 0 4px 10px rgba(26, 77, 58, 0.2);
        }

        /* Loading Spinner */
        .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: currentColor;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Porsche Animation */
        @keyframes drive-across {
            0% {
                transform: translateX(-150px) scale(0.8);
            }
            10% {
                transform: translateX(0) scale(1);
            }
            90% {
                transform: translateX(calc(100vw - 150px)) scale(1);
            }
            100% {
                transform: translateX(100vw) scale(0.8);
            }
        }
        
        .animate-drive-across {
            animation: drive-across 3s ease-in-out forwards;
        }
        
        .porsche-silhouette {
            filter: drop-shadow(0 0 8px rgba(26, 77, 58, 0.6));
        }

        .porsche-animation {
            position: fixed;
            left: 0;
            z-index: 50;
            pointer-events: none;
        }

        /* Footer */
        .footer {
            margin-top: 4rem;
            padding-top: 2rem;
            border-top: 1px solid var(--border-color);
            text-align: center;
        }

        .footer-brand {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .footer-badge {
            padding: 0.25rem 0.75rem;
            background: linear-gradient(135deg, var(--accent-green), var(--accent-green-bright));
            color: var(--text-primary);
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            box-shadow: 0 0 10px rgba(26, 77, 58, 0.3);
        }

        /* Hide/Show modes */
        .mode-content {
            display: none;
        }

        .mode-content.active {
            display: block;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .mode-toggle {
                flex-direction: column;
                align-items: center;
            }

            .mode-btn {
                width: 100%;
                max-width: 300px;
            }

            .input-container {
                flex-direction: column;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .card {
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="brand">
                <div class="brand-icon">AI</div>
                <span class="brand-text">AI Sourcing Tool by Ramy</span>
            </div>
            <h1 class="main-title">GitHub Email Hunter</h1>
            <p class="subtitle">Discover email addresses from GitHub profiles with AI-powered profile discovery</p>
        </div>

        <!-- Mode Toggle -->
        <div class="mode-toggle">
            <button class="mode-btn active" onclick="switchMode('single')">🔒 Single Search</button>
            <button class="mode-btn" onclick="switchMode('bulk')">📊 Bulk Search</button>
        </div>

        <!-- Single Mode -->
        <div class="mode-content active" id="single-mode">
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">🔒</div>
                    <div>
                        <div class="card-title">Single Profile Search</div>
                        <div class="card-subtitle">Enter a GitHub username to unlock emails</div>
                    </div>
                </div>

                <div class="input-container">
                    <input type="text" id="username" class="form-input" placeholder="Enter GitHub username..." />
                    <button class="btn btn-large" id="huntBtn" onclick="huntEmails()">
                        <span id="btnText">🔒 Unlock Emails</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Bulk Mode -->
        <div class="mode-content" id="bulk-mode">
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">📊</div>
                    <div>
                        <div class="card-title">Bulk Profile Search</div>
                        <div class="card-subtitle">Process multiple GitHub usernames at once</div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">GitHub Usernames</label>
                    <textarea 
                        class="form-input form-textarea" 
                        id="bulk-usernames" 
                        placeholder="Enter GitHub usernames (one per line):

torvalds
gaearon
sindresorhus
tj
addyosmani

Or paste a list of usernames..."
                        style="min-height: 150px; font-family: 'JetBrains Mono', monospace;"
                    ></textarea>
                </div>
                
                <button class="btn btn-large" id="bulkHuntBtn" onclick="bulkHuntEmails()">
                    <span id="bulkBtnText">🔒 Unlock All Emails</span>
                </button>
            </div>
        </div>
        
        <div id="result"></div>
        
        <div class="suggestions">
            <div class="suggestions-title">💡 Try these popular developers for guaranteed results:</div>
            <div class="suggestion-tags">
                <span class="suggestion-tag" onclick="addSuggestion('torvalds')">torvalds</span>
                <span class="suggestion-tag" onclick="addSuggestion('gaearon')">gaearon</span>
                <span class="suggestion-tag" onclick="addSuggestion('sindresorhus')">sindresorhus</span>
                <span class="suggestion-tag" onclick="addSuggestion('tj')">tj</span>
                <span class="suggestion-tag" onclick="addSuggestion('addyosmani')">addyosmani</span>
                <span class="suggestion-tag" onclick="addSuggestion('paulirish')">paulirish</span>
            </div>
        </div>

        <!-- Footer -->
        <div class="footer">
            <div class="footer-brand">
                © 2025 AI Sourcing Tool by Ramy
            </div>
            <div class="footer-badge">⚡ AI-Powered Sourcing</div>
        </div>
    </div>

    <script>
        let currentMode = 'single';
        let bulkResults = [];

        function switchMode(mode) {
            currentMode = mode;
            
            // Update button states
            document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Show/hide modes
            document.querySelectorAll('.mode-content').forEach(content => content.classList.remove('active'));
            document.getElementById(mode + '-mode').classList.add('active');
            
            // Clear results
            document.getElementById('result').innerHTML = '';
        }

        function addSuggestion(username) {
            if (currentMode === 'single') {
                document.getElementById('username').value = username;
                document.getElementById('username').focus();
            } else {
                const textarea = document.getElementById('bulk-usernames');
                const currentValue = textarea.value.trim();
                textarea.value = currentValue ? currentValue + '\n' + username : username;
            }
        }

        function calculateCandidateScore(email, name, username, count, totalEmails) {
            let score = 0;
            const emailLower = email.toLowerCase();
            const nameLower = name.toLowerCase();
            const usernameLower = username.toLowerCase();
            
            if (emailLower.includes(usernameLower)) score += 40;
            
            const nameWords = nameLower.split(' ');
            const usernameWords = usernameLower.split(/[-_]/);
            
            for (const nameWord of nameWords) {
                for (const usernameWord of usernameWords) {
                    if (nameWord.includes(usernameWord) || usernameWord.includes(nameWord)) {
                        score += 25;
                    }
                }
            }
            
            const personalDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'icloud.com', 'me.com'];
            const domain = emailLower.split('@')[1];
            if (personalDomains.includes(domain)) score += 20;
            
            if (count > totalEmails * 0.5) score += 15;
            if (count > totalEmails * 0.7) score += 10;
            
            if (nameWords.length > 0) {
                const firstName = nameWords[0];
                if (firstName.length > 2 && emailLower.includes(firstName)) score += 15;
            }
            
            if (nameWords.length > 1) {
                const lastName = nameWords[nameWords.length - 1];
                if (lastName.length > 2 && emailLower.includes(lastName)) score += 15;
            }
            
            const genericPatterns = ['noreply', 'no-reply', 'support', 'admin', 'info', 'contact'];
            for (const pattern of genericPatterns) {
                if (emailLower.includes(pattern)) score -= 30;
            }
            
            return Math.max(0, Math.min(100, score));
        }

        function getConfidenceLevel(score) {
            if (score >= 70) return { level: 'Very High', class: 'confidence-high' };
            if (score >= 50) return { level: 'High', class: 'confidence-high' };
            if (score >= 30) return { level: 'Medium', class: 'confidence-medium' };
            return { level: 'Low', class: 'confidence-low' };
        }

        async function fetchUserEmails(username) {
            const response = await fetch(`https://api.github.com/users/${username}/events/public`);
            
            if (!response.ok) {
                throw new Error(response.status === 404 ? 'User not found' : 'API error');
            }

            const events = await response.json();
            const emailMap = new Map();

            events.forEach(event => {
                if (event.payload?.commits) {
                    event.payload.commits.forEach(commit => {
                        if (commit.author?.email && !commit.author.email.includes('noreply.github.com')) {
                            const email = commit.author.email;
                            const name = commit.author.name;
                            
                            if (emailMap.has(email)) {
                                emailMap.get(email).count++;
                            } else {
                                emailMap.set(email, { name, count: 1 });
                            }
                        }
                    });
                }
            });

            const totalCommits = Array.from(emailMap.values()).reduce((sum, data) => sum + data.count, 0);
            
            return Array.from(emailMap.entries())
                .map(([email, data]) => {
                    const score = calculateCandidateScore(email, data.name, username, data.count, totalCommits);
                    const confidence = getConfidenceLevel(score);
                    return { 
                        email, 
                        name: data.name, 
                        count: data.count, 
                        score,
                        confidence,
                        isCandidate: score >= 50
                    };
                })
                .sort((a, b) => {
                    if (a.isCandidate && !b.isCandidate) return -1;
                    if (!a.isCandidate && b.isCandidate) return 1;
                    if (a.isCandidate && b.isCandidate) return b.score - a.score;
                    return b.count - a.count;
                })
                .slice(0, 5);
        }

        async function bulkHuntEmails() {
            const usernames = document.getElementById('bulk-usernames').value
                .split('\n')
                .map(line => line.trim())
                .filter(line => line && !line.startsWith('#'));

            if (usernames.length === 0) {
                document.getElementById('result').innerHTML = `
                    <div class="result error">
                        <div class="result-title">⚠️ No usernames provided</div>
                        <div class="result-stats">Please enter some usernames</div>
                    </div>
                `;
                return;
            }

            const bulkBtn = document.getElementById('bulkHuntBtn');
            const btnText = document.getElementById('bulkBtnText');
            const resultDiv = document.getElementById('result');

            bulkBtn.disabled = true;
            btnText.innerHTML = '<span class="spinner"></span>Unlocking...';
            bulkResults = [];
            
            resultDiv.innerHTML = `
                <div class="result loading">
                    <div class="result-title"><span class="spinner"></span> Processing GitHub profiles...</div>
                    <div class="result-stats">This may take a few minutes</div>
                </div>
            `;

            for (const username of usernames) {
                try {
                    const emails = await fetchUserEmails(username);
                    bulkResults.push({
                        username,
                        emails,
                        success: true,
                        candidateCount: emails.filter(e => e.isCandidate).length
                    });
                    
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (error) {
                    bulkResults.push({
                        username,
                        emails: [],
                        success: false,
                        error: error.message
                    });
                }
            }

            displayBulkResults();
            
            bulkBtn.disabled = false;
            btnText.innerHTML = '🔒 Unlock All Emails';
        }

        function displayBulkResults() {
            const resultDiv = document.getElementById('result');
            const totalUsers = bulkResults.length;
            const successfulUsers = bulkResults.filter(r => r.success).length;
            const totalEmails = bulkResults.reduce((sum, r) => sum + r.emails.length, 0);
            const totalCandidates = bulkResults.reduce((sum, r) => sum + (r.candidateCount || 0), 0);

            let resultsHTML = `
                <div class="result success">
                    <div class="result-header">
                        <div class="result-title">🎉 Bulk Processing Complete</div>
                        <div class="result-stats">
                            📊 Processed <strong>${totalUsers}</strong> users • 
                            ✅ <strong>${successfulUsers}</strong> successful • 
                            📧 <strong>${totalEmails}</strong> total emails • 
                            ⭐ <strong>${totalCandidates}</strong> candidate emails
                        </div>
                    </div>
            `;

            bulkResults.forEach(result => {
                if (result.success && result.emails.length > 0) {
                    const candidateEmails = result.emails.filter(e => e.isCandidate);
                    
                    resultsHTML += `
                        <div class="card" style="margin-bottom: 1.5rem;">
                            <div class="card-header">
                                <div class="card-icon">👤</div>
                                <div>
                                    <div class="card-title">${result.username}</div>
                                    <div class="card-subtitle">${result.emails.length} emails • ${candidateEmails.length} candidates</div>
                                </div>
                            </div>
                    `;
                    
                    result.emails.forEach(email => {
                        const candidateClass = email.isCandidate ? 'candidate' : '';
                        
                        resultsHTML += `
                            <div class="email-item ${candidateClass}" onclick="copyToClipboard('${email.email}', event)">
                                <div class="email-address">📧 ${email.email}</div>
                                <div class="email-meta">
                                    <span>👤 ${email.name}</span>
                                    <span>📊 ${email.count} commit${email.count !== 1 ? 's' : ''}</span>
                                    ${email.isCandidate ? `<span class="confidence-badge ${email.confidence.class}">${email.confidence.level}</span>` : ''}
                                </div>
                            </div>
                        `;
                    });
                    
                    resultsHTML += '</div>';
                } else if (!result.success) {
                    resultsHTML += `
                        <div class="card" style="margin-bottom: 1.5rem; border-color: rgba(239, 68, 68, 0.2);">
                            <div class="card-header">
                                <div class="card-icon" style="background: rgba(239, 68, 68, 0.2);">❌</div>
                                <div>
                                    <div class="card-title">${result.username}</div>
                                    <div class="card-subtitle" style="color: #ef4444;">${result.error}</div>
                                </div>
                            </div>
                        </div>
                    `;
                }
            });

            resultsHTML += '</div>';
            resultDiv.innerHTML = resultsHTML;
        }

        function animatePorsche(e) {
            const porsche = document.createElement('div');
            porsche.className = 'porsche-animation animate-drive-across';
            porsche.style.top = (e.clientY - 25) + 'px';
            
            porsche.innerHTML = `
                <div class="porsche-silhouette">
                    <svg width="120" height="40" viewBox="0 0 120 40" fill="#1a4d3a">
                        <path d="M110,25 L120,25 L115,20 L110,25 Z M0,25 L10,25 L10,20 L0,25 Z M10,25 L100,25 C105,25 110,20 110,15 C110,10 105,10 100,10 L30,10 C20,10 15,15 10,20 L10,25 Z M30,10 L30,5 L90,5 L90,10 Z M35,5 L35,2 L85,2 L85,5 Z M20,25 C20,28 17,30 15,30 C12,30 10,28 10,25 M100,25 C100,28 97,30 95,30 C92,30 90,28 90,25 M30,25 C30,28 27,30 25,30 C22,30 20,28 20,25 M80,25 C80,28 77,30 75,30 C72,30 70,28 70,25 M50,25 C50,28 47,30 45,30 C42,30 40,28 40,25 M60,25 C60,28 57,30 55,30 C52,30 50,28 50,25" />
                    </svg>
                </div>
            `;
            
            document.body.appendChild(porsche);
            
            setTimeout(() => {
                if (porsche.parentNode) {
                    porsche.parentNode.removeChild(porsche);
                }
            }, 3000);
        }

        function copyToClipboard(text, event) {
            navigator.clipboard.writeText(text).then(() => {
                const originalHTML = event.target.innerHTML;
                const originalBg = event.target.style.background;
                
                event.target.innerHTML = event.target.innerHTML.replace('📧', '📋') + ' <strong>Copied!</strong>';
                event.target.style.background = 'rgba(16, 185, 129, 0.2)';
                
                animatePorsche(event);
                
                setTimeout(() => {
                    event.target.innerHTML = originalHTML;
                    event.target.style.background = originalBg;
                }, 1500);
            });
        }

        async function huntEmails() {
            const username = document.getElementById('username').value.trim();
            const resultDiv = document.getElementById('result');
            const huntBtn = document.getElementById('huntBtn');
            const btnText = document.getElementById('btnText');
            
            if (!username) {
                resultDiv.innerHTML = `
                    <div class="result error">
                        <div class="result-title">⚠️ Username required</div>
                        <div class="result-stats">Please enter a GitHub username</div>
                    </div>
                `;
                return;
            }

            huntBtn.disabled = true;
            btnText.innerHTML = '<span class="spinner"></span>Unlocking...';
            
            resultDiv.innerHTML = `
                <div class="result loading">
                    <div class="result-title"><span class="spinner"></span> Searching GitHub events...</div>
                    <div class="result-stats">Analyzing commit history for email addresses</div>
                </div>
            `;

            try {
                const emailResults = await fetchUserEmails(username);

                if (emailResults.length === 0) {
                    resultDiv.innerHTML = `
                        <div class="result error">
                            <div class="result-title">😔 No high-confidence emails found</div>
                            <div class="result-stats">Try: torvalds, gaearon, or sindresorhus</div>
                        </div>
                    `;
                } else {
                    const candidateEmails = emailResults.filter(result => result.isCandidate);
                    
                    const emailList = emailResults.map(result => {
                        const candidateClass = result.isCandidate ? 'candidate' : '';
                        
                        return `
                            <div class="email-item ${candidateClass}" onclick="copyToClipboard('${result.email}', event)">
                                <div class="email-address">📧 ${result.email}</div>
                                <div class="email-meta">
                                    <span>👤 ${result.name}</span>
                                    <span>📊 ${result.count} commit${result.count !== 1 ? 's' : ''}</span>
                                    ${result.isCandidate ? `<span class="confidence-badge ${result.confidence.class}">${result.confidence.level}</span>` : ''}
                                </div>
                            </div>
                        `;
                    }).join('');
                    
                    const candidateMessage = candidateEmails.length > 0 ? 
                        `🎯 Found <strong>${candidateEmails.length}</strong> likely candidate email${candidateEmails.length !== 1 ? 's' : ''}! Click any email to copy it.` :
                        `Click any email to copy it to your clipboard.`;
                    
                    resultDiv.innerHTML = `
                        <div class="result success">
                            <div class="result-header">
                                <div class="result-title">🎉 Unlocked ${emailResults.length} email${emailResults.length !== 1 ? 's' : ''}!</div>
                                <div class="result-stats">${candidateMessage}</div>
                            </div>
                            ${emailList}
                        </div>
                    `;
                }
            } catch (error) {
                resultDiv.innerHTML = `
                    <div class="result error">
                        <div class="result-title">❌ Error occurred</div>
                        <div class="result-stats">${error.message}</div>
                    </div>
                `;
            } finally {
                huntBtn.disabled = false;
                btnText.innerHTML = '🔒 Unlock Emails';
            }
        }

        // Allow Enter key to trigger search in single mode
        document.getElementById('username').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') huntEmails();
        });
    </script>
</body>
</html>
